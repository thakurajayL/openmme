[%- DataGroup = TemplateInputVar %]
[%- USE String %]
[%- MACRO CLASSNAME(str) BLOCK %]
[%- className =  String.new %]
[%- strList =  String.new(str).split("_") %]
[%- FOREACH str = strList %]
[%-    token = className.append(String.new(str).capital.text()) %]
[%- END %]
[%- className = className.append( "Manager" ) %]
[%- className %]
[%- END -%]
/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */
 
/**************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/ctxtManagerTmpls/subsDataGroupManager.cpp.tt>
 ***************************************/
#include "contextManager/subsDataGroupManager.h"
#include "log.h"
#include "mmeStates/defaultMmeState.h"
#include <sstream>

namespace mme
{
	/******************************************************************************
	* Constructor
	******************************************************************************/
	SubsDataGroupManager::SubsDataGroupManager()
	{
		[%- FOREACH DataBlock = DataGroup.DataBlocks %]
			[% CLASSNAME(DataBlock.BlockName) %]m_p = NULL;
		[%- END %]

			initialize();
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	SubsDataGroupManager::~SubsDataGroupManager()
	{
		[%- FOREACH DataBlock = DataGroup.DataBlocks %]
			delete [% CLASSNAME(DataBlock.BlockName) %]m_p;
		[%- END %]
	}
	
	/******************************************
	*  Initializes control block and pool managers
	******************************************/
	void SubsDataGroupManager::initialize()
	{
		initializeCBStore([% DataGroup.PoolSize %]);

		[%- FOREACH DataBlock = DataGroup.DataBlocks %]
		[% CLASSNAME(DataBlock.BlockName) %]m_p = new [% CLASSNAME(DataBlock.BlockName) %]([% DataBlock.PoolSize %]);
		[%- END %]
	}
	
	/******************************************************************************
	* creates and returns static instance
	******************************************************************************/
	SubsDataGroupManager* SubsDataGroupManager::Instance()
	{
			static SubsDataGroupManager subDataGroupMgr;
			return &subDataGroupMgr;
	}

	[%- FOREACH DataBlock = DataGroup.DataBlocks %]
	[% DataBlock.BlockName %]* SubsDataGroupManager::get[% DataBlock.BlockName %]()
	{
		return [% CLASSNAME(DataBlock.BlockName) %]m_p->allocate[% DataBlock.BlockName %]();
	}

	void SubsDataGroupManager::delete[% DataBlock.BlockName %]([% DataBlock.BlockName %]* [% DataBlock.BlockName %]p )
	{
		[% CLASSNAME(DataBlock.BlockName) %]m_p->deallocate[% DataBlock.BlockName %]( [% DataBlock.BlockName %]p );
	}
	[%- END %]
	
	[%- FOREACH DataBlock = DataGroup.DataBlocks %]
		[%- FOREACH Data = DataBlock.Data %]
			[%- IF Data.Key == 'Yes' %]
	/******************************************
	* Add a [% Data.Name %] as key and cb index as value to [% Data.Name %]_cb_id_map
	******************************************/
	int SubsDataGroupManager::add[% Data.Name %]key( [% Data.Type %] key, int cb_index )
	{
		std::lock_guard<std::mutex> lock([% Data.Name %]_cb_id_map_mutex);

		int rc = 1;

		auto itr = [% Data.Name %]_cb_id_map.insert(std::pair<[% Data.Type %], int>( key, cb_index ));
		if (itr.second == false)
		{
			rc = -1;
		}
		return rc;
	}
	
	/******************************************
	* Delete a [% Data.Name %] key from [% Data.Name %]_cb_id_map
	******************************************/
	int SubsDataGroupManager::delete[% Data.Name %]key( [% Data.Type %] key )
	{
		std::lock_guard<std::mutex> lock([% Data.Name %]_cb_id_map_mutex);
 
		return [% Data.Name %]_cb_id_map.erase( key );
	}
	
	/******************************************
	* Find cb with given [% Data.Name %] from [% Data.Name %]_cb_id_map
	* returns -1 if not found, else cb index
	******************************************/ 
	int SubsDataGroupManager::findCBWith[% Data.Name %]( [% Data.Type %] key )
	{
		std::lock_guard<std::mutex> lock([% Data.Name %]_cb_id_map_mutex);
        
		auto itr = [% Data.Name %]_cb_id_map.find( key );
		if( itr != [% Data.Name %]_cb_id_map.end())
		{
			return itr->second;
		}
		return -1;
	}
		     [%- END %]
	    [%- END %]
[%- END %]
}