[%- DataStore = TemplateInputVar %]
[%- USE String %]
[%- PROCESS templates/ctxtManagerTmpls/commonMacro.tt -%]
/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/**************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/ctxtManagerTmpls/dataBlocks.cpp.tt>
 ***************************************/
#include "contextManager/dataBlocks.h"

namespace mme
{
	[%- FOREACH DataGroup = DataStore.DataGroups %]
	[%- FOREACH DataBlock = DataGroup.DataBlocks %]
	[%- dataBlockClassName = CLASSNAME(DataBlock.BlockName) %]
	/******************************************************************************
	*******************************************************************************
	*							[% dataBlockClassName %]
	*******************************************************************************
	******************************************************************************/
	
	/******************************************************************************
	* Constructor
	******************************************************************************/
	[% dataBlockClassName %]::[% dataBlockClassName %]():[% PROCESS defaultValList FILTER indent 12 %]
	
	{[%- FOREACH Data = DataBlock.Data -%]
[%-UNLESS Data.Cardinality=='' %]
		memset([% Data.Name %]_m,0,sizeof([% Data.Name %]_m));
[%END-%]
[%-END%]	
	}
	
	/******************************************************************************
	* Destructor
	******************************************************************************/
	[% dataBlockClassName %]::~[% dataBlockClassName %]()
	{
	}	
	[%- FOREACH Data = DataBlock.Data %]
	
	/******************************************************************************
	* sets [% Data.Name %]
	******************************************************************************/
	void [% dataBlockClassName %]::set[% String.new(Data.Name).capital.text() %]( [% ARG(Data,"set") %] )
	{
	[%-IF Data.Cardinality=='' %]
		[% Data.Name %]_m = [% Data.Name %]_i;
	[%-ELSE%]
		[% Data.Name %]Len_m=len;
		memcpy([% Data.Name %]_m, [% Data.Name %]_i, [% Data.Name %]Len_m);
	[%- END %]
	}
	
	/******************************************************************************
	* returns [% Data.Name %]
	******************************************************************************/	
	[% ARG(Data,"get") %] [% dataBlockClassName %]::get[% String.new(Data.Name).capital.text() %]() const
	{
		return [% Data.Name %]_m;
	}
	[%-UNLESS Data.Cardinality=='' %]
	/******************************************************************************
	* returns [% Data.Name %]Len
	******************************************************************************/	
	uint16_t [% dataBlockClassName %]::get[% String.new(Data.Name).capital.text() %]Len() const
	{
		return [% Data.Name %]Len_m;
	}
	[%- END %]
	[%- END %]
	
	[%- FOREACH Child = DataBlock.Children %]
	/******************************************************************************
	* sets [% Child %]
	******************************************************************************/
	void [% dataBlockClassName %]::set[% Child %]( [% Child %]* [% Child %]p )
	{
		[% Child %]_mp = [% Child %]p;
	}
	
	/******************************************************************************
	* returns [% Child %]
	******************************************************************************/
	[% Child %]* [% dataBlockClassName %]::get[% Child %]()
	{
		return [% Child %]_mp;
	}
[%- END %]
[%- END %]
[%- END %]
} // mme
[%- BLOCK defaultValList-%]
[%- FOREACH Data = DataBlock.Data %]
[%- defaultval = String.new() %]
[%- primTypeList = [ 'int', "short", "uint8_t", "uint16_t", "uint32_t", "unsigned int", "unsigned short","unsigned char"] %]
[%- defaultval="$Data.Name/_m($Data.DefaultVal)"%]
[%-IF Data.Cardinality=='' %]
[%- FOREACH type = primTypeList %]
[%- 	IF Data.Type == type %]
[%- defaultval="$Data.Name/_m(0)"%]
[%-END-%][%-END-%]
[%-ELSE%]
[%- defaultval="$Data.Name/Len_m(0)"%]
[%-END%]
[% defaultval.remove("/") %]
[%-UNLESS loop.last -%],[%END-%][%END-%]
[%- FOREACH Child = DataBlock.Children %],[% Child %]_mp(NULL)[%END-%][% END -%]