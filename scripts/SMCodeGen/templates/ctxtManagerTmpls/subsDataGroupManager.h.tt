 [%- DataGroup = TemplateInputVar %]
 [%- USE String %]
 [%- MACRO CLASSNAME(str) BLOCK %]
 [%- className =  String.new %]
 [%- strList =  String.new(str).split("_") %]
 [%- FOREACH str = strList %]
 [%-    token = className.append(String.new(str).capital.text()) %]
 [%- END %]
 [%- className = className.append( "Manager" ) %]
 [%- className %]
 [%- END %]
 [%- MACRO FILENAME(str) BLOCK %]
 [%- fileName =  String.new %]
 [%- str = CLASSNAME(str) %]
 [%- fileName = fileName.append(str.substr(0,1)).lower %]
 [%- fileName = fileName.append(str.substr(1)) %]
 [%- fileName %]
 [%- END -%]
/*
 * Copyright 2019-present, Infosys Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef __SUBS_DATAGROUPMANAGER__
#define __SUBS_DATAGROUPMANAGER__
/**************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/SMCodeGen/templates/ctxtManagerTmpls/subsDataGroupManager.h.tt>
 ***************************************/
#include <map>
#include <mutex>
#include "dataGroupManager.h"
#include "contextManager/dataBlocks.h"
[%- IF DataGroup.DgName == 'SubscriberData' %]
[%- FOREACH DataBlock = DataGroup.DataBlocks %]
#include "contextManager/[% FILENAME(DataBlock.BlockName) %].h"
[%- END %]
namespace mme
{	
	class SubsDataGroupManager:public cmn::DGM::DataGroupManager
	{
		public:
		
			/******************************************
			* Instance 
			*    Creates static instance for the SubsDataGroupManager
			*******************************************/
			static SubsDataGroupManager* Instance();
	
			/****************************************
			* SubsDataGroupManager
			*    Destructor
			****************************************/
			virtual ~SubsDataGroupManager();
			
			/******************************************
			* initialize
			* Initializes control block and pool managers
			******************************************/
			void initialize();

			[%- FOREACH DataBlock = DataGroup.DataBlocks %]
			/******************************************
			 * get[% DataBlock.BlockName %]
			 * Get [% DataBlock.BlockName %] data block
			 ******************************************/
			[% DataBlock.BlockName %]* get[% DataBlock.BlockName %]();
			
			/******************************************
			 * delete[% DataBlock.BlockName %]
			 *  Delete a [% DataBlock.BlockName %] data block
			 ******************************************/
			void delete[% DataBlock.BlockName %]([% DataBlock.BlockName %]* [% DataBlock.BlockName %]p );
			[%- END %]
			
			[%- FOREACH DataBlock = DataGroup.DataBlocks %]
				[%- FOREACH Data = DataBlock.Data %]
					[%- IF Data.Key == 'Yes' %]
			/******************************************
			* add[% Data.Name %]key
			* Add a [% Data.Name %] as key and cb index as value to [% Data.Name %]_cb_id_map
			******************************************/
			int add[% Data.Name %]key( [% Data.Type %] key, int cb_index );
			
			/******************************************
			* delete[% Data.Name %]key
			* delete a [% Data.Name %] key from [% Data.Name %]_cb_id_map
			******************************************/		
			int delete[% Data.Name %]key( [% Data.Type %] key );
			
			/******************************************
			* findCBWith[% Data.Name %]
			* Find cb with given [% Data.Name %] from [% Data.Name %]_cb_id_map
			******************************************/	
			int findCBWith[% Data.Name %]( [% Data.Type %] key );
					[%- END %]
				[%- END %]
			[%- END %]
			
			
		private:
			
			/****************************************
			* SubsDataGroupManager
			*    Private constructor
			****************************************/
			SubsDataGroupManager();  
			
			[%- FOREACH DataBlock = DataGroup.DataBlocks %]
			/****************************************
			* [% DataBlock.BlockName %] Pool Manager
			****************************************/
			[% CLASSNAME(DataBlock.BlockName) %]* [% CLASSNAME(DataBlock.BlockName) %]m_p;
			
			[%- END %]
			
			[%- FOREACH DataBlock = DataGroup.DataBlocks %]
				[%- FOREACH Data = DataBlock.Data %]
					[%- IF Data.Key == 'Yes' %]
			/****************************************
			* [% Data.Name %] Key Map
			****************************************/
			std::map<[% Data.Type %],int> [% Data.Name %]_cb_id_map;
			
			/****************************************
			* [% Data.Name %] Key Map
			****************************************/
			std::mutex [% Data.Name %]_cb_id_map_mutex;
					[%- END %]
				[%- END %]
			[%- END %]
	};
};
[% END %]

#endif