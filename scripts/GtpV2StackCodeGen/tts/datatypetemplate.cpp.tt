/*
 * Copyright 2019-present Infosys Limited
 *
 * SPDX-License-Identifier: Apache-2.0
 */

/******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/datatypetemplate.cpp.tt>
 ******************************************************************************/
#include "[% tempdata.fileName %].h"

// TODO

[% tempdata.className %]::[% tempdata.className %]()
{
    // TODO
}

[% tempdata.className %]::~[%tempdata.className %]() {
    // TODO Auto-generated destructor stub
}

[% FOREACH type IN tempdata.DataTypeListAuto %]
bool [%tempdata.className %]::encode[% type.typeName %](MsgBuffer &buffer, [% type.typeName %] const &data)
{
[% IF type.validationPresent == "y" -%]
    if (!([% type.validationRule %]))
    {
        errorStream.add((char *)"Data validation failure: [% type.typeName %]\n"); 
        return false; //TODO need to add validations
    }
[% END -%]   
[% FOREACH Item IN type.sequence -%]
[% IF Item.skipType == "y" -%]
    buffer.skip[% Item.bitByte %]([% Item.skipValue %]);

[% ELSE -%]
[% IF Item.presence == "optional" -%]
    if (data.[% Item.fieldName %]Present)
    {

[% IF Item.encodeConditional == "y" -%]
        if ([% Item.encodeCondition %])
        {

[% IF Item.validationPresent == "y" -%]
            if (!([% Item.validationRule %]))
            {
                errorStream.add((char *)"Data validation failure: [% Item.fieldName %]\n"); 
                return false; //TODO need to add validations
            }
[% END -%]
[% IF Item.leafType == "y" -%]
[% IF Item.bitField == "y" -%]
            buffer.writeBits(data.[% Item.fieldName %], [% Item.fieldSize %]);
[% ELSE -%]
            buffer.write[% Item.fieldType %](data.[% Item.fieldName %]);
[% END -%]
[% ELSE -%]
            if (!(DataTypeCodecUtils::encode[% Item.fieldType %](buffer, data.[% Item.fieldName %])))
            {
                errorStream.add((char *)"Failed to encode [% Item.fieldName %]\n");
                return false;
            }
[% END -%]

        }
    }
[% ELSE -%]
[% IF Item.leafType == "y" -%]
[% IF Item.bitField == "y" -%]
        buffer.writeBits(data.[% Item.fieldName %], [% Item.fieldSize %]);
[% ELSE -%]
        buffer.write[% Item.fieldType %](data.[% Item.fieldName %]);
[% END -%]
[% ELSE -%]
        if (!(DataTypeCodecUtils::encode[% Item.fieldType %](buffer, data.[% Item.fieldName %])))
        {
            errorStream.add((char *)"Failed to encode [% Item.fieldName %]\n");
            return false;
        }

[% END -%]
    }
[% END -%]
[% ELSE -%]
[% IF Item.encodeConditional == "y" -%]
    if ([% Item.encodeCondition %])
    {
[% IF Item.validationPresent == "y" -%]
        if (!([% Item.validationRule %]))
        {    
            errorStream.add((char *)"Data validation failure: [% Item.fieldName %]\n"); 
            return false; //TODO need to add validations
        }
[% END -%]
[% IF Item.leafType == "y" -%]
[% IF Item.bitField == "y" -%]
        buffer.writeBits(data.[% Item.fieldName %], [% Item.fieldSize %]);
[% ELSE -%]
        buffer.write[% Item.fieldType %](data.[% Item.fieldName %]);
[% END -%]
[% ELSE -%]
        if (!(DataTypeCodecUtils::encode[% Item.fieldType %](buffer, data.[% Item.fieldName %])))
        {
            errorStream.add((char *)"Failed to encode [% Item.fieldName %]\n");
            return false;
        }

[% END -%]
    }

[% ELSE -%]
[% IF Item.validationPresent == "y" -%]
    if (!([% Item.validationRule %]))
    {
         errorStream.add((char *)"Data validation failure: [% Item.fieldName %]\n"); 
         return false; //TODO need to add validations
    }
[% END -%]
[% IF Item.leafType == "y" -%]
[% IF Item.bitField == "y" -%]
    buffer.writeBits(data.[% Item.fieldName %], [% Item.fieldSize %]);
[% ELSE -%]
    buffer.write[% Item.fieldType %](data.[% Item.fieldName %]);
[% END -%]
[% ELSE -%]
    if (!(DataTypeCodecUtils::encode[% Item.fieldType %](buffer, data.[% Item.fieldName %])))
    {
        errorStream.add((char *)"Failed to encode [% Item.fieldName %]\n");
        return false;
    }

[% END -%]
[% END -%]
[% END -%]
[% END -%]
[% END -%]
    return true;
}

bool [%tempdata.className %]::decode[% type.typeName %](MsgBuffer &buffer,[% type.typeName %] &data,
                         Uint16 length)
{
    
    Uint16 typeBoundary = buffer.getCurrentIndex() + length;
[% FOREACH Item IN type.sequence -%]
[% IF Item.skipType == "y" -%]
    buffer.skip[% Item.bitByte %]([% Item.skipValue %]);
    if (buffer.getCurrentIndex() > typeBoundary)
    {
        errorStream.add((char *)"Attempt to read beyond type boundary: [% Item.fieldName %]\n");
        return false;
    }
[% ELSE -%]
[% IF Item.decodeConditional == "y" %]
    if ([% Item.decodeCondition %])
    {

[% IF Item.leafType == "y" -%]
[% IF Item.bitField == "y" -%]
        data.[% Item.fieldName %] = buffer.readBits([% Item.fieldSize %]);
        if (buffer.getCurrentIndex() > typeBoundary)
        {
            errorStream.add((char *)"Attempt to read beyond type boundary: [% Item.fieldName %]\n");
            return false;
        }
[% ELSE %]
        buffer.read[% Item.fieldType %](data.[% Item.fieldName %]);
        if (buffer.getCurrentIndex() > typeBoundary)
        {
            errorStream.add((char *)"Attempt to read beyond type boundary: [% Item.fieldName %]\n");
            return false;
        }
[% END -%]
[% ELSE -%]
[% IF Item.length == "lengthLeft" -%]
        Uint16 lengthLeft = typeBoundary - buffer.getCurrentIndex();
[% END -%]
[% IF Item.arrayType == "y" -%]
        if (!(DataTypeCodecUtils::decode[% Item.fieldType %](buffer, data.[% Item.fieldName %], [% Item.length %], [% Item.count %])))
[% ELSE -%]
        if (!(DataTypeCodecUtils::decode[% Item.fieldType %](buffer, data.[% Item.fieldName %], [% Item.length %])))
[% END -%]
        {
            errorStream.add((char *)"Failed to decode: [% Item.fieldName %]\n");
            return false;
        }
[% END -%]
[% IF Item.validationPresent == "y" -%]
        if (!([% Item.validationRule %]))
        {
            errorStream.add((char *)"Data validation failure: [% Item.fieldName %]\n");
            return false; //TODO need to add validations
        }
[% END -%]
[% IF Item.presence == "optional" -%]
        data.[% Item.fieldName %]Present = true;
[% END -%]

    }
[% ELSE -%]
[% IF Item.leafType == "y" -%]
[% IF Item.bitField == "y" -%]
    data.[% Item.fieldName %] = buffer.readBits([% Item.fieldSize %]);
    if (buffer.getCurrentIndex() > typeBoundary)
    {
         errorStream.add((char *)"Attempt to read beyond type boundary: [% Item.fieldName %]\n");
         return false;
    }
[% ELSE %]
    buffer.read[% Item.fieldType %](data.[% Item.fieldName %]);
    if (buffer.getCurrentIndex() > typeBoundary)
    {
         errorStream.add((char *)"Attempt to read beyond type boundary: [% Item.fieldName %]\n");
         return false;
    }
[% END -%]
[% ELSE -%]
[% IF Item.length == "lengthLeft" -%]
 Uint16   lengthLeft = typeBoundary - buffer.getCurrentIndex();
[% END -%]
[% IF Item.arrayType == "y" -%]
    if (!(DataTypeCodecUtils::decode[% Item.fieldType %](buffer, data.[% Item.fieldName %], [% Item.length %], [% Item.count %])))
[% ELSE -%]
    if (!(DataTypeCodecUtils::decode[% Item.fieldType %](buffer, data.[% Item.fieldName %], [% Item.length %])))
[% END -%]
    {
        errorStream.add((char *)"Failed to decode: [% Item.fieldName %]\n");
        return false;
    }
[% END -%]
[% IF Item.validationPresent == "y" -%]
    if (!([% Item.validationRule %]))
    {
         errorStream.add((char *)"Data validation failure: [% Item.fieldName %]\n");
         return false; //TODO need to add validations
    }
[% END -%]
[% IF Item.presence == "optional" -%]
    data.[% Item.fieldName %]Present = true;
[% END -%]
[% END -%]
[% END -%]
[% END -%]

[% IF validationPresent == "y" -%]
    if (!([% validationRule %]))
    {
        errorStream.add((char *)"Data validation failure at IE: [%tempdata.className %]\n");
        return false;
    }
[% END -%]
  return true;
}

void [%tempdata.className %]::display[% type.typeName %]_v([% type.typeName %] const &data, Debug &stream)
{
    stream.incrIndent();
    stream.add((char *)"[% type.typeName %]:");
    stream.incrIndent();
    stream.endOfLine();
[% FOREACH Item IN type.sequence -%]
[% IF Item.skipType != "y" -%]
[% IF Item.presence == "optional" -%]
    if (data.[% Item.fieldName %]Present)
    {
[% IF Item.encodeConditional == "y" %]
        if ([% Item.encodeCondition %])
        {
[% IF Item.leafType == "y" -%]
            stream.add((char *)"[% Item.fieldName %] = ");
            stream.add(data.[% Item.fieldName %]);
            stream.endOfLine();
[% ELSE -%]
            DataTypeCodecUtils::display[% Item.fieldType %]_v(data.[% Item.fieldName %], stream);  
[% END -%]
        }
    }
[%ELSE-%]
[% IF Item.leafType == "y" -%]
        stream.add((char *)"[% Item.fieldName %] = ");
        stream.add(data.[% Item.fieldName %]);
        stream.endOfLine();
[% ELSE -%]
         DataTypeCodecUtils::display[% Item.fieldType %]_v(data.[% Item.fieldName %], stream);
[% END -%]
    }

[% END -%]
[% ELSE -%]
[% IF Item.encodeConditional == "y" %]
    if ([% Item.encodeCondition %])
    {
[% IF Item.leafType == "y" -%]
        stream.add((char *)"[% Item.fieldName %] = ");
        stream.add(data.[% Item.fieldName %]);
        stream.endOfLine();
[% END -%]
    }
[%ELSE-%]
[% IF Item.leafType == "y" -%]
    stream.add((char *)"[% Item.fieldName %] = ");
    stream.add(data.[% Item.fieldName %]);
    stream.endOfLine();
[% END -%]
[% END -%]    
[% END -%]
[% END -%]
[% END -%]
    stream.decrIndent();
    stream.decrIndent();
}
[% END %]

[% FOREACH arrayType IN tempdata.arrayTypeList %]
bool [%tempdata.className %]::encode[% arrayType.typeName %](MsgBuffer &buffer,
 [% arrayType.typeName %] const &data)
{
    Uint16 i;
    for (i = 0; i < data.count; i++)
    {
[% IF arrayType.leafType == "y" -%]
        buffer.write[% arrayType.subType %](data.values[i]);
[% ELSE -%]
        if (!(DataTypeCodecUtils::encode[% arrayType.subType %](buffer, data.values[i])))
        {
            errorStream.add((char *)"Failed to encode [% arrayType.typeName %]\n");
            return false;
        }
[% END -%]
    }
    return true;
}

bool [%tempdata.className %]::decode[% arrayType.typeName %](MsgBuffer &buffer,
 [% arrayType.typeName %] &data, Uint16 length, Uint16 count)
{
    Uint16 i = 0;
    data.count = 0;
    bool readTillEnd = (count == 0);
    Uint16 startIndex = buffer.getCurrentIndex();
    Uint16 typeBoundary = startIndex+length;
    
    while ((i < count)||(readTillEnd && (buffer.getCurrentIndex() < typeBoundary)))
    {
[% IF arrayType.leafType == "y" -%]
        buffer.read[% arrayType.subType %](data.values[i]);
[% ELSE -%]
        Uint16 lengthLeft = typeBoundary - buffer.getCurrentIndex();
        [% IF arrayType.arrayType == "y" -%]
         if (!(DataTypeCodecUtils::decode[% arrayType.subType %](buffer, data.values[i], lengthLeft, data.count)))
         [% ELSE -%]
         if (!(DataTypeCodecUtils::decode[% arrayType.subType %](buffer, data.values[i], lengthLeft)))
         [% END -%]
        
        {
            errorStream.add((char *)"Failed to encode [% arrayType.typeName %]\n");
            return false;
        }
[% END -%]
        if (buffer.getCurrentIndex() > typeBoundary)
        {
            errorStream.add((char *)"Attempt to read beyond type boundary:[% arrayType.typeName %]\n");
            return false;
        }
        data.count++;
        i++;
    }
	return true;
}

void [%tempdata.className %]::display[% arrayType.typeName %]_v([% arrayType.typeName %] const &data, Debug &stream)
{
    stream.incrIndent();
    stream.add((char *)"[% arrayType.typeName %]: Count: ");
    stream.add(data.count);
    stream.incrIndent();
    stream.endOfLine();
[% IF arrayType.leafType == "y" -%]    
    Uint16 i;
    for (i = 0; i < data.count; i++)
    {
        stream.add(data.values[i]);
        stream.endOfLine();     
    }
[% END -%]
    stream.decrIndent();
    stream.decrIndent();
}
[% END %]