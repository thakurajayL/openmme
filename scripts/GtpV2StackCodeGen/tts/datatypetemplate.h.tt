/*
 * Copyright 2019-present, Infosys Limited.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 /******************************************************************************
 *
 * This is an auto generated file.
 * Please do not edit this file.
 * All edits to be made through template source file
 * <TOP-DIR/scripts/GtpV2StackCodeGen/tts/datatypetemplate.h.tt>
 ******************************************************************************/

#ifndef [% tempdata.classNameUC %]_H_
#define [% tempdata.classNameUC %]_H_

#include <sstream>
#include <msgBuffer.h>
#include "gtpV2IeDataTypes.h"
#include "gtpV2DataTypes.h"
#include "manual/gtpV2DataTypes_Manual.h"

//TODO Includes

class DataTypeCodecUtils {
public:
    [% tempdata.className %]();
    virtual ~[% tempdata.className %]();

[% FOREACH type IN tempdata.DataTypeListAuto %]
    static bool encode[% type.typeName %](MsgBuffer &buffer, [% type.typeName %] const &data);
    static bool decode[% type.typeName %](MsgBuffer &buffer, [% type.typeName %] &data,
                 Uint16 length);
    static void display[% type.typeName %]_v([% type.typeName %] const &data, Debug &stream);
[% END %]

    // The following methods are generated to encode, decode and display array types
[% FOREACH arrayType IN tempdata.arrayTypeList %]
    static bool encode[% arrayType.typeName %](MsgBuffer &buffer, [% arrayType.typeName %] const &data);
    static bool decode[% arrayType.typeName %](MsgBuffer &buffer, [% arrayType.typeName %] &data,
                 Uint16 length, Uint16 count);
    static void display[% arrayType.typeName %]_v([% arrayType.typeName %] const &data, Debug &stream);

[% END -%]

    // The following methods are to be written manually
    // See DataTypeCodecUtils_Manual.cc for implementation
[% FOREACH type IN tempdata.DataTypeListManual %]
    static bool encode[% type.typeName %](MsgBuffer &buffer, [% type.typeName %] const &data);
    static bool decode[% type.typeName %](MsgBuffer &buffer, [% type.typeName %] &data,
                 Uint16 length);
    static void display[% type.typeName %]_v([% type.typeName %] const &data, Debug &stream);
[% END %]
         
};

#endif /*[% tempdata.classNameUC %]_H_*/